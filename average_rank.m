% compute the average rank of different methods and the results of Friedman
% test
clear;
methods={'SB-KKM','A-MKKM','MKKM','LMKKM','RMKKM','Proposed'};
acc=[0.5220, 0.4531, 0.4928, 0.5423, 0.5906, 0.6553;
    0.5548, 0.4691, 0.5390, 0.5782, 0.6253, 0.6128;
    0.5639, 0.4351, 0.6030, 0.7233, 0.6587, 0.7250;
	0.3489, 0.3156, 0.2840, 0.6595, 0.3479, 0.6775;
	0.4070, 0.3575, 0.4043, 0.3673, 0.4375, 0.4358;
	0.5988, 0.5510, 0.5624, 0.6726, 0.6647, 0.6895;
    0.7329, 0.6455, 0.7469, 0.9723, 0.9019, 0.9615;
	0.5358, 0.4700, 0.4750, 0.7128, 0.5738, 0.7225;
	0.4758, 0.4042, 0.4661, 0.5448, 0.5321, 0.5648];
nmi=[0.4903, 0.3595, 0.4412, 0.5664, 0.5834, 0.6256;
	0.5987, 0.4249, 0.5612, 0.6062, 0.6369, 0.6271;
	0.5520, 0.3761, 0.6030, 0.6940, 0.6360, 0.7125;
    0.6505, 0.6336, 0.5905, 0.8460, 0.6581, 0.8576;
	0.5688, 0.5207, 0.5686, 0.5269, 0.5843, 0.5891;
	0.7408, 0.7101, 0.7177, 0.7743, 0.7701, 0.7757;
	0.7982, 0.7154, 0.7940, 0.9567, 0.9064, 0.9428;
	0.7324, 0.6727, 0.6849, 0.8339, 0.7552, 0.8382;
	0.5219, 0.4584, 0.5105, 0.5499, 0.5583, 0.5749];
purity=[0.6734, 0.5862, 0.6522, 0.7729, 0.7440, 0.7954;
	0.7387, 0.6367, 0.7146, 0.7812, 0.7935, 0.7802;
	0.6600, 0.5451, 0.7022, 0.8168, 0.7558, 0.8280;
	0.3518, 0.3448, 0.3039, 0.6846, 0.3717, 0.7045;
	0.4364, 0.3832, 0.4345, 0.3955, 0.4703, 0.4683;
    0.6457, 0.5998, 0.6066, 0.6897, 0.6976, 0.7009;
	0.7592, 0.6812, 0.7662, 0.9723, 0.9117, 0.9615;
	0.5828, 0.5190, 0.5128, 0.7373, 0.6213, 0.7472;
	0.4958, 0.4321, 0.4830, 0.5515, 0.5430, 0.5697];

[n,k]=size(acc);
% acc
[~,acc_temp]=sort(acc,2,'descend');
acc_ranks=ones(n,k);
for i=1:n
    acc_ranks(i,acc_temp(i,:))=(1:k);
end
acc_aranks=mean(acc_ranks);
[tau_chi_acc,tau_f_acc]=tau(acc_aranks,n)
% nmi
[~,nmi_temp]=sort(nmi,2,'descend');
nmi_ranks=ones(n,k);
for i=1:n
    nmi_ranks(i,nmi_temp(i,:))=(1:k);
end
nmi_aranks=mean(nmi_ranks);
[tau_chi_nmi,tau_f_nmi]=tau(nmi_aranks,n)
% purity
[~,purity_temp]=sort(purity,2,'descend');
purity_ranks=ones(n,k);
for i=1:n
    purity_ranks(i,purity_temp(i,:))=(1:k);
end
purity_aranks=mean(purity_ranks);
[tau_chi_purity,tau_f_purity]=tau(purity_aranks,n)

% function tau
function [tau_chi,tau_f]=tau(aranks,n)
k=length(aranks);
tau_chi=12*n/(k*(k+1))*(aranks*aranks'-k*(k+1)^2/4);
tau_f=(n-1)*tau_chi/(n*(k-1)-tau_chi);
end